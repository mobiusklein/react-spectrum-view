[{"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\index.js":"1","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\viewer.js":"2","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\util.js":"3","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\component.js":"4","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\scan_list\\scan_list.js":"5","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\spectrum_canvas.js":"6","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\utils.js":"7","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\spectrum_layers.js":"8"},{"size":350,"mtime":1610979262967,"results":"9","hashOfConfig":"10"},{"size":5156,"mtime":1610330274609,"results":"11","hashOfConfig":"10"},{"size":2155,"mtime":1610330189438,"results":"12","hashOfConfig":"10"},{"size":1160,"mtime":1610330212500,"results":"13","hashOfConfig":"10"},{"size":5138,"mtime":1609301775324,"results":"14","hashOfConfig":"10"},{"size":9114,"mtime":1610913442343,"results":"15","hashOfConfig":"10"},{"size":2134,"mtime":1610330201066,"results":"16","hashOfConfig":"10"},{"size":14004,"mtime":1610913712774,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"na9cgx",{"filePath":"20","messages":"21","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\index.js",[],"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\viewer.js",["38","39","40","41","42","43","44"],"import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nimport SpectrumCanvasComponent from \"./spectrum/component\";\r\nimport { SpectrumGetter, SpectrumList } from \"./scan_list/scan_list\";\r\nimport { getScan } from \"./util\";\r\n\r\nimport \"./App.css\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { Label } from \"@material-ui/icons\";\r\n\r\nfunction AveragineSelect({ name, options, currentAveragine, setAveragine }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    select: {\r\n      margin: theme.spacing(1),\r\n      // minWidth: 120,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const optTags = options.map((opt) => {\r\n    return (\r\n      <MenuItem value={opt} key={`${name}-${opt}`} className=\"capitalized\">\r\n        {opt}\r\n      </MenuItem>\r\n    );\r\n  });\r\n  return (\r\n    <FormControl>\r\n      <InputLabel id={`${_.kebabCase(name)}-label`}>\r\n        <span className=\"capitalized\">\r\n          {name.replace(\"ms\", \"MS\").replace(\"-\", \" \")}\r\n        </span>{\" \"}\r\n        Model:{\" \"}\r\n      </InputLabel>\r\n      <Select\r\n        labelId={`${_.kebabCase(name)}-label`}\r\n        className=\"capitalized\"\r\n        name={_.kebabCase(name)}\r\n        value={currentAveragine}\r\n        classes={classes}\r\n        onChange={(event) => {\r\n          setAveragine(event.target.value);\r\n        }}\r\n      >\r\n        {optTags}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nconst AVERAGINE_CHOICES = [\"peptide\", \"glycan\", \"glycopeptide\"];\r\n\r\nfunction MS1ScanAveragingInput({ currentValue, setValue }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: \"120px\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  return (\r\n    <TextField\r\n      name=\"ms1-averaging\"\r\n      label=\"MS1 Averaging\"\r\n      defaultValue={currentValue}\r\n      size=\"small\"\r\n      margin=\"dense\"\r\n      classes={classes}\r\n      inputProps={{ style: { height: \"2.2em\", width: \"120px\" } }}\r\n      variant=\"outlined\"\r\n      onBlur={(event) => setValue(event.target.value)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SpectrumStatusDisplay({ ...props }) {\r\n  const spinner = <LinearProgress />;\r\n  return (\r\n    <FormControl style={{ marginTop: \"1.5em\", textTransform: \"capitalize\" }}>\r\n      <span style={{ marginBottom: \"2px\" }}>\r\n        Spectrum Process: {props.value}\r\n      </span>{\" \"}\r\n      {props.value == \"pending\" && spinner}\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nfunction SpectrumViewer({ ...props }) {\r\n  const [ms1Averagine, setMS1Averagine] = React.useState(\"peptide\");\r\n  const [msnAveragine, setMSnAveragine] = React.useState(\"peptide\");\r\n  const [ms1ScanAveraging, setMS1ScanAveraging] = React.useState(0);\r\n  const [dataFileKey, setDataFileKey] = React.useState(0);\r\n  const [spectrumLoadingState, setSpectrumLoadingState] = React.useState(\r\n    \"idle\"\r\n  );\r\n  const [dataHost, setDataHost] = React.useState(\"http://localhost:5000/\");\r\n\r\n  const config = {\r\n    ms1Averagine,\r\n    msnAveragine,\r\n    dataFileKey,\r\n    ms1ScanAveraging,\r\n    dataHost,\r\n  };\r\n\r\n  const [spectrumData, setSpectrumData] = React.useState({\r\n    // scanId: \"controllerType=0 controllerNumber=1 scan=10032\",\r\n    scanId: null,\r\n    layers: [],\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (spectrumData.scanId !== null) {\r\n      console.log(\r\n        \"Re-processing spectrum with new config...\",\r\n        spectrumData.scanId\r\n      );\r\n      getScan(\r\n        spectrumData.scanId,\r\n        config,\r\n        setSpectrumData,\r\n        setSpectrumLoadingState\r\n      );\r\n    }\r\n  }, [config.ms1Averagine, config.msnAveragine, config.ms1ScanAveraging]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SpectrumCanvasComponent config={config} spectrumData={spectrumData} />\r\n      <div className=\"spectrum-canvas-controls\">\r\n        <SpectrumStatusDisplay value={spectrumLoadingState} />\r\n        <AveragineSelect\r\n          name={\"ms-averagine\"}\r\n          options={AVERAGINE_CHOICES}\r\n          currentAveragine={ms1Averagine}\r\n          setAveragine={setMS1Averagine}\r\n        />\r\n        <AveragineSelect\r\n          name={\"msn-averagine\"}\r\n          options={AVERAGINE_CHOICES}\r\n          currentAveragine={msnAveragine}\r\n          setAveragine={setMSnAveragine}\r\n        />\r\n        <MS1ScanAveragingInput\r\n          currentValue={ms1ScanAveraging}\r\n          setValue={setMS1ScanAveraging}\r\n        />\r\n      </div>\r\n      <div style={{ marginBottom: \"2em\" }}>\r\n        <SpectrumGetter\r\n          config={config}\r\n          dispatch={setSpectrumData}\r\n          setProgress={setSpectrumLoadingState}\r\n        />\r\n      </div>\r\n      {/* <div>\r\n        <SpectrumList\r\n          config={config}\r\n          setSpectrumData={setSpectrumData}\r\n          spectrumLoadingProgress={setSpectrumLoadingState}\r\n        />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { SpectrumViewer };\r\n",["45","46"],"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\util.js",[],"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\component.js",[],"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\scan_list\\scan_list.js",["47","48","49"],"import * as React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { getScan, getScanByIndex } from \"../util\";\r\n\r\nimport \"./scan-list.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\n// Layout based upon https://stackoverflow.com/questions/48749090/fixed-header-flex-table-header-vertical-align\r\n\r\nfunction SpectrumGetter({ scanIndex, config, dispatch, setProgress }) {\r\n  return (\r\n    <FormControl>\r\n      <TextField\r\n        placeholder=\"Scan Index\"\r\n        id=\"scan-index-fetch\"\r\n        label=\"Load Scan by Index\"\r\n        variant=\"outlined\"\r\n        onBlur={(event) => {\r\n          getScanByIndex(\r\n            parseInt(event.target.value),\r\n            config,\r\n            dispatch,\r\n            setProgress\r\n          );\r\n        }}\r\n      />\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nfunction makeSpectrumListRow(record, onClickHandler) {\r\n  return (\r\n    <tr\r\n      className={`scan-record ms-level-${record.ms_level > 1 ? \"n\" : \"1\"}`}\r\n      key={record.scan_id}\r\n      data-scan-id={record.scan_id}\r\n      onClick={onClickHandler}\r\n    >\r\n      <td className=\"scan-attrib\">{record.scan_id}</td>\r\n      <td className=\"scan-attrib\">{record.scan_time.toFixed(3)}</td>\r\n      <td className=\"scan-attrib narrow\">{record.ms_level}</td>\r\n      <td className=\"scan-attrib narrow\">\r\n        {record.mz !== undefined ? record.mz.toFixed(3) : \"\\u00A0\"}\r\n      </td>\r\n      <td className=\"scan-attrib narrow\">\r\n        {record.charge !== undefined ? record.charge : \"\\u00A0\"}\r\n      </td>\r\n      <td className=\"scan-attrib\">\r\n        {record.activation !== undefined ? record.activation.method : \"\\u00A0\"}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction makeSpectrumListRowClickHandler(config, setSpectrumData, setProgress) {\r\n  const onClickHandler = (e) => {\r\n    e.preventDefault();\r\n    let element = e.target;\r\n    while (!element.classList.contains(\"scan-record\")) {\r\n      element = element.parentElement;\r\n      if (element === null || element === undefined) {\r\n        return;\r\n      }\r\n    }\r\n    if (element.classList.contains(\"scan-record\")) {\r\n      getScan(element.dataset.scanId, config, setSpectrumData, setProgress);\r\n    }\r\n  };\r\n  return onClickHandler;\r\n}\r\n\r\nconst SpectrumListRows = React.memo(\r\n  (props) => {\r\n    const { listState, onClickHandler } = props;\r\n    const rows = listState.records.map((record) =>\r\n      makeSpectrumListRow(record, onClickHandler)\r\n    );\r\n    console.log(\"Rendering\", rows.length, \"rows\");\r\n    return <tbody className=\"scan-record-body\">{rows}</tbody>;\r\n  },\r\n  (prevProps, nextProps) =>\r\n    prevProps.listState.checksum === nextProps.listState.checksum\r\n);\r\n\r\nfunction SpectrumList({ config, setSpectrumData, spectrumLoadingProgress }) {\r\n  const [listState, setListState] = React.useState({\r\n    records: [],\r\n    checksum: -1,\r\n  });\r\n\r\n  const [loadStatus, setLoadStatus] = React.useState(\"idle\");\r\n\r\n  React.useEffect(() => {\r\n    const request = fetch(`${config.dataHost}index/${config.dataFileKey}`);\r\n    setLoadStatus(\"pending\");\r\n    request\r\n      .then((response) => {\r\n        setLoadStatus(\"parsing\");\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Fetched Records\", data);\r\n        const newState = {\r\n          records: data.records,\r\n          checksum: data.records.length,\r\n        };\r\n        setLoadStatus(\"done\");\r\n        setListState(newState);\r\n      });\r\n  }, [config.dataFileKey]);\r\n\r\n  const clickHandler = makeSpectrumListRowClickHandler(\r\n    config,\r\n    setSpectrumData,\r\n    spectrumLoadingProgress\r\n  );\r\n  switch (loadStatus) {\r\n    case \"done\": {\r\n      return (\r\n        <table className=\"scan-list-container\">\r\n          <thead className=\"scan-record-header\">\r\n            <tr>\r\n              <th className=\"scan-attrib\">Scan ID</th>\r\n              <th className=\"scan-attrib\">Scan Time</th>\r\n              <th className=\"scan-attrib narrow\">MS Level</th>\r\n              <th className=\"scan-attrib narrow\">Precursor m/z</th>\r\n              <th className=\"scan-attrib narrow\">Precursor Charge</th>\r\n              <th className=\"scan-attrib\">Activation</th>\r\n            </tr>\r\n          </thead>\r\n          <SpectrumListRows\r\n            listState={listState}\r\n            onClickHandler={clickHandler}\r\n          />\r\n        </table>\r\n      );\r\n    }\r\n    case \"pending\": {\r\n      return (\r\n        <div>\r\n          <h3 role=\"alert\">Loading Spectra...</h3>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n    case \"parsing\": {\r\n      return (\r\n        <div>\r\n          <h3 role=\"alert\">Building List...</h3>\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n    default: {\r\n      return <h3 role=\"alert\">Loading... {loadStatus}</h3>;\r\n    }\r\n  }\r\n}\r\n\r\nexport { SpectrumGetter, SpectrumList };\r\n","C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\spectrum_canvas.js",[],"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\utils.js",[],"C:\\Users\\Joshua\\Dev\\react-spectrum-view\\src\\spectrum\\spectrum_layers.js",["50","51"],"import * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nconst defaultColor = \"steelblue\";\r\n\r\nfunction pointToProfile(points) {\r\n  const result = [];\r\n  for (const point of points) {\r\n    const beforePoint = Object.assign({}, point);\r\n    const afterPoint = Object.assign({}, point);\r\n    beforePoint.mz -= 1e-6;\r\n    beforePoint.intensity = -1;\r\n    result.push(beforePoint);\r\n    result.push(point);\r\n    afterPoint.mz += 1e-6;\r\n    afterPoint.intensity = -1;\r\n    result.push(afterPoint);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport class SpectrumData {\r\n  asArray() {\r\n    return Array.from(this);\r\n  }\r\n\r\n  [Symbol.iterator]() {\r\n    let self = this;\r\n    let i = 0;\r\n    const iterator = {\r\n      next() {\r\n        if (i >= self.length) {\r\n          return { value: null, done: true };\r\n        }\r\n        const value = self.get(i);\r\n        i++;\r\n        return { value: value, done: false };\r\n      },\r\n    };\r\n    return iterator;\r\n  }\r\n\r\n  maxMz() {\r\n    if (this.length === 0) {\r\n      return 0;\r\n    }\r\n    const point = this.get(this.length - 1);\r\n    return point.mz;\r\n  }\r\n\r\n  minMz() {\r\n    if (this.length === 0) {\r\n      return 0;\r\n    }\r\n    const point = this.get(0);\r\n    return point.mz;\r\n  }\r\n\r\n  maxIntensity() {\r\n    let maxValue = 0;\r\n    for (let point of this) {\r\n      if (point.intensity > maxValue) {\r\n        maxValue = point.intensity;\r\n      }\r\n    }\r\n    return maxValue;\r\n  }\r\n\r\n  minIntensity() {\r\n    return 0;\r\n  }\r\n\r\n  searchMz(mz) {\r\n    if (mz > this.maxMz()) {\r\n      return this.length - 1;\r\n    } else if (mz < this.minMz()) {\r\n      return 0;\r\n    }\r\n    let lo = 0;\r\n    let hi = this.length - 1;\r\n\r\n    while (hi !== lo) {\r\n      let mid = Math.trunc((hi + lo) / 2);\r\n      let value = this.get(mid).mz;\r\n      let diff = value - mz;\r\n      if (Math.abs(diff) < 1e-3) {\r\n        let bestIndex = mid;\r\n        let bestError = Math.abs(diff);\r\n        let i = mid;\r\n        while (i > -1) {\r\n          value = this.get(i).mz;\r\n          diff = Math.abs(value - mz);\r\n          if (diff < bestError) {\r\n            bestIndex = i;\r\n            bestError = diff;\r\n          } else {\r\n            break;\r\n          }\r\n          i--;\r\n        }\r\n        i = mid + 1;\r\n        while (i < this.length) {\r\n          value = this.get(i).mz;\r\n          diff = Math.abs(value - mz);\r\n          if (diff < bestError) {\r\n            bestIndex = i;\r\n            bestError = diff;\r\n          } else {\r\n            break;\r\n          }\r\n          i++;\r\n        }\r\n        return bestIndex;\r\n      } else if (hi - lo === 1) {\r\n        let bestIndex = mid;\r\n        let bestError = Math.abs(diff);\r\n        let i = mid;\r\n        while (i > -1) {\r\n          value = this.get(i).mz;\r\n          diff = Math.abs(value - mz);\r\n          if (diff < bestError) {\r\n            bestIndex = i;\r\n            bestError = diff;\r\n          } else {\r\n            break;\r\n          }\r\n          i--;\r\n        }\r\n        i = mid + 1;\r\n        while (i < this.length) {\r\n          value = this.get(i).mz;\r\n          diff = Math.abs(value - mz);\r\n          if (diff < bestError) {\r\n            bestIndex = i;\r\n            bestError = diff;\r\n          } else {\r\n            break;\r\n          }\r\n          i++;\r\n        }\r\n        return bestIndex;\r\n      } else if (diff > 0) {\r\n        hi = mid;\r\n      } else {\r\n        lo = mid;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  slice(begin, end) {\r\n    throw new Error(\"Not Implemented\");\r\n  }\r\n\r\n  between(beginMz, endMz) {\r\n    return this.slice(this.searchMz(beginMz), this.searchMz(endMz));\r\n  }\r\n}\r\n\r\nexport class DataLayer extends SpectrumData {\r\n  constructor(metadata) {\r\n    super();\r\n    this.metadata = metadata;\r\n    this._color = null;\r\n  }\r\n\r\n  get color() {\r\n    return this._color === null ? defaultColor : this._color;\r\n  }\r\n\r\n  set color(value) {\r\n    this._color = value;\r\n  }\r\n\r\n  get layerType() {\r\n    return \"data\";\r\n  }\r\n\r\n  onBrush(brush) {\r\n    // console.log(\"onBrush\", this)\r\n    this.line.select(\".brush\").call(brush.move, null);\r\n  }\r\n\r\n  onHover(canvas, cursorInfo) {\r\n    return;\r\n  }\r\n\r\n  redraw(canvas) {\r\n    this.line\r\n      .select(\".line\")\r\n      .transition(100)\r\n      .attr(\r\n        \"d\",\r\n        d3\r\n          .line()\r\n          .x((d) => canvas.xScale(d.mz))\r\n          .y((d) => canvas.yScale(d.intensity))\r\n      );\r\n  }\r\n\r\n  remove() {\r\n    this.line.remove();\r\n    this.path.remove();\r\n  }\r\n\r\n  buildPath(canvas) {\r\n    const path = d3\r\n      .line()\r\n      .x((d) => canvas.xScale(d.mz))\r\n      .y((d) => canvas.yScale(d.intensity));\r\n    return path;\r\n  }\r\n\r\n  _makeData() {\r\n    return this.asArray();\r\n  }\r\n\r\n  styleArtist(path) {\r\n    return path\r\n      .attr(\"stroke\", this.color)\r\n      .attr(\"stroke-width\", 1.5)\r\n      .attr(\"fill\", \"none\");\r\n  }\r\n\r\n  initArtist(canvas) {\r\n    this.line = canvas.container.append(\"g\").attr(\"clip-path\", \"url(#clip)\");\r\n    this.color = canvas.colorCycle.nextColor();\r\n    const points = this._makeData();\r\n\r\n    this.path = this.styleArtist(\r\n      this.line\r\n        .append(\"path\")\r\n        .datum(points)\r\n        .attr(\"class\", `line ${this.layerType}`)\r\n    );\r\n\r\n    this.path.attr(\"d\", this.buildPath(canvas));\r\n\r\n    this.brushPatch = this.line\r\n      .append(\"g\")\r\n      .attr(\"class\", \"brush\")\r\n      .call(canvas.brush);\r\n  }\r\n}\r\n\r\nexport class LineArtist extends SpectrumData {\r\n  constructor(points, metadata) {\r\n    super();\r\n    this.points = points;\r\n    this.points.sort((a, b) => {\r\n      if (a.mz < b.mz) {\r\n        return -1;\r\n      } else if (a.mz > b.mz) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    this.length = points.length;\r\n    this.line = null;\r\n    this.label = metadata.label ? metadata.label : \"\";\r\n    this.color = metadata.color ? metadata.color : defaultColor;\r\n  }\r\n\r\n  get(i) {\r\n    return this.points[i];\r\n  }\r\n\r\n  remove() {\r\n    this.line.remove();\r\n    this.path.remove();\r\n  }\r\n\r\n  _makeData() {\r\n    const result = pointToProfile(this.points);\r\n    return result;\r\n  }\r\n\r\n  buildPath(canvas) {\r\n    const path = d3\r\n      .line()\r\n      .x((d) => canvas.xScale(d.mz))\r\n      .y((d) => canvas.yScale(d.intensity));\r\n    return path;\r\n  }\r\n\r\n  styleArtist(path) {\r\n    return path\r\n      .attr(\"stroke\", this.color)\r\n      .attr(\"stroke-width\", 2.5)\r\n      .attr(\"fill\", \"none\");\r\n  }\r\n\r\n  initArtist(canvas) {\r\n    this.line = canvas.container.append(\"g\").attr(\"clip-path\", \"url(#clip)\");\r\n    const points = this._makeData();\r\n\r\n    this.path = this.styleArtist(\r\n      this.line\r\n        .append(\"path\")\r\n        .datum(points)\r\n        .attr(\"class\", `line ${this.layerType}`)\r\n    );\r\n\r\n    this.path.attr(\"d\", this.buildPath(canvas));\r\n  }\r\n}\r\n\r\nexport class ProfileLayer extends DataLayer {\r\n  constructor(mz, intensity, metadata) {\r\n    super(metadata);\r\n    this.mz = mz;\r\n    this.length = mz.length;\r\n    this.intensity = intensity;\r\n    this.line = null;\r\n  }\r\n\r\n  get(i) {\r\n    return {\r\n      mz: this.mz[i],\r\n      intensity: this.intensity[i],\r\n    };\r\n  }\r\n\r\n  slice(begin, end) {\r\n    return new ProfileLayer(\r\n      this.mz.slice(begin, end),\r\n      this.intensity.slice(begin, end)\r\n    );\r\n  }\r\n\r\n  get layerType() {\r\n    return \"profile-layer\";\r\n  }\r\n}\r\n\r\nexport class PointLayer extends DataLayer {\r\n  constructor(points, metadata) {\r\n    super(metadata);\r\n    this.points = points;\r\n    this.points.sort((a, b) => {\r\n      if (a.mz < b.mz) {\r\n        return -1;\r\n      } else if (a.mz > b.mz) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    this.length = points.length;\r\n    this.line = null;\r\n    this.label = null;\r\n  }\r\n\r\n  get(i) {\r\n    return this.points[i];\r\n  }\r\n\r\n  get layerType() {\r\n    return \"centroid-layer\";\r\n  }\r\n\r\n  slice(begin, end) {\r\n    return new PointLayer(this.points.slice(begin, end));\r\n  }\r\n\r\n  _makeData() {\r\n    const result = pointToProfile(this);\r\n    return result;\r\n  }\r\n\r\n  onHover(canvas, cursorInfo) {\r\n    let mz = cursorInfo.mz;\r\n    let index = this.searchMz(mz);\r\n    let peak = this.get(index);\r\n    if (peak === undefined) {\r\n      return;\r\n    }\r\n    if (Math.abs(peak.mz - mz) > 0.3) {\r\n      if (this.label !== null) {\r\n        this.label.remove();\r\n        this.label = null;\r\n      }\r\n      return;\r\n    }\r\n    let mzPosition = canvas.xScale(peak.mz);\r\n    let intensityPosition = canvas.yScale(peak.intensity);\r\n    if (this.label !== null) {\r\n      this.label.remove();\r\n    }\r\n    this.label = canvas.container\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${mzPosition},${intensityPosition - 10})`);\r\n    this.label\r\n      .append(\"text\")\r\n      .text(peak.mz.toFixed(3))\r\n      .style(\"text-anchor\", \"middle\")\r\n      .attr(\"class\", \"cursor-label\");\r\n  }\r\n\r\n  remove() {\r\n    super.remove();\r\n    if (this.label !== null) {\r\n      this.label.remove();\r\n    }\r\n  }\r\n}\r\n\r\nlet neutralMass = (mz, charge) => {\r\n  return mz * Math.abs(charge) - charge * 1.007;\r\n};\r\n\r\nexport class DeconvolutedLayer extends PointLayer {\r\n  constructor(points, metadata) {\r\n    super(points, metadata);\r\n    this.patternContainer = null;\r\n    this.patternLine = null;\r\n    this.patternColor = null;\r\n  }\r\n\r\n  onHover(canvas, cursorInfo) {\r\n    super.onHover(canvas, cursorInfo);\r\n    const mz = cursorInfo.mz;\r\n    let index = this.searchMz(mz);\r\n    const peak = this.get(index);\r\n    if (peak === undefined) {\r\n      return;\r\n    }\r\n    if (Math.abs(peak.mz - mz) > 1.5) {\r\n      if (this.patternContainer) {\r\n        this.patternContainer.remove();\r\n        this.patternContainer = null;\r\n      }\r\n      if (this.patternLine) {\r\n        this.patternLine.remove();\r\n        this.patternLine = null;\r\n      }\r\n      return;\r\n    }\r\n    if (!this.patternColor) {\r\n      const patternColor = d3.rgb(this.color);\r\n      const totalChannels =\r\n        ((patternColor.r + patternColor.g + patternColor.b) * 1.0) / (125 * 3);\r\n      console.log(this.color, totalChannels);\r\n      if (totalChannels < 0.5) {\r\n        this.patternColor = patternColor.brighter(2);\r\n      } else {\r\n        this.patternColor = patternColor.darker(1);\r\n      }\r\n    }\r\n    let averageMz = 0;\r\n    let totalIntensity = 0;\r\n    let apexPosition = 0;\r\n    let apexIntensity = 0;\r\n    let i = 0;\r\n    for (let envelopePoint of peak.envelope) {\r\n      averageMz += envelopePoint.mz * envelopePoint.intensity;\r\n      totalIntensity += envelopePoint.intensity;\r\n      if (envelopePoint.intensity > apexIntensity) {\r\n        apexIntensity = envelopePoint.intensity;\r\n        apexPosition = i;\r\n      }\r\n      i++;\r\n    }\r\n    const apexMz = averageMz / totalIntensity;\r\n    const apexMzPosition = canvas.xScale(apexMz);\r\n    const apexIntensityPosition = canvas.yScale(apexIntensity * 1.2);\r\n    if (this.patternContainer) {\r\n      this.patternContainer.remove();\r\n    }\r\n    this.patternContainer = canvas.container\r\n      .append(\"g\")\r\n      .attr(\r\n        \"transform\",\r\n        `translate(${apexMzPosition},${apexIntensityPosition - 10})`\r\n      );\r\n    this.patternContainer\r\n      .append(\"text\")\r\n      .text(neutralMass(peak.mz, peak.charge).toFixed(3) + `, ${peak.charge}`)\r\n      .style(\"text-anchor\", \"middle\")\r\n      .attr(\"class\", \"cursor-label envelope-label\");\r\n\r\n    if (this.patternLine) {\r\n      this.patternLine.remove();\r\n    }\r\n    this.patternLine = new LineArtist(peak.envelope, {\r\n      color: this.patternColor,\r\n    });\r\n    this.patternLine.initArtist(canvas);\r\n  }\r\n\r\n  remove() {\r\n    super.remove();\r\n    if (this.patternContainer) {\r\n      this.patternContainer.remove();\r\n      this.patternContainer = null;\r\n    }\r\n    if (this.patternLine) {\r\n      this.patternLine.remove();\r\n    }\r\n  }\r\n}\r\n\r\nclass AbstractPointLayer extends PointLayer {\r\n  slice(begin, end) {\r\n    return new PointLayer([]);\r\n  }\r\n}\r\n\r\nexport class PrecursorPeakLayer extends AbstractPointLayer {\r\n  constructor(peak, metadata) {\r\n    super([peak], metadata);\r\n    this.mz = peak.mz;\r\n    this.intensity = peak.intensity;\r\n    this.charge = peak.charge;\r\n    this.precursorLabel = null;\r\n  }\r\n\r\n  maxIntensity() {\r\n    return 1;\r\n  }\r\n\r\n  get layerType() {\r\n    return \"precursor-layer\";\r\n  }\r\n\r\n  addLabel(canvas) {\r\n    const lines = [\r\n      `Prec. m/z: ${this.mz.toFixed(3)}`,\r\n      `Prec. z: ${this.charge}`,\r\n      `Prec. mass: ${neutralMass(this.mz, this.charge).toFixed(3)}`,\r\n    ];\r\n\r\n    this.precursorLabel = canvas.container\r\n      .append(\"text\")\r\n      .attr(\r\n        \"transform\",\r\n        `translate(${canvas.width * 0.85},${canvas.height * 0.02})`\r\n      )\r\n      .style(\"text-anchor\", \"left\")\r\n      .attr(\"class\", \"precursor-label\");\r\n    this.precursorLabel\r\n      .selectAll(\"tspan.precursor-label-row\")\r\n      .data(lines)\r\n      .enter()\r\n      .append(\"tspan\")\r\n      .attr(\"dx\", 10)\r\n      .attr(\"dy\", 16)\r\n      .attr(\"x\", 0)\r\n      .text((d) => d);\r\n  }\r\n\r\n  initArtist(canvas) {\r\n    super.initArtist(canvas);\r\n    this.addLabel(canvas);\r\n  }\r\n\r\n  styleArtist(path) {\r\n    let gapSize = 10;\r\n    let dashSize = 5;\r\n    return super\r\n      .styleArtist(path)\r\n      .attr(\"stroke-dasharray\", `${dashSize} 1 ${gapSize}`);\r\n  }\r\n\r\n  remove() {\r\n    super.remove();\r\n    if (this.precursorLabel) {\r\n      this.precursorLabel.remove();\r\n    }\r\n  }\r\n}\r\n\r\nexport class IsolationWindowLayer extends AbstractPointLayer {\r\n  constructor(windows, height, metadata) {\r\n    super(IsolationWindowLayer._splitWindows(windows, height), metadata);\r\n    this.windows = windows;\r\n    this.height = height;\r\n  }\r\n\r\n  maxIntensity() {\r\n    return 1;\r\n  }\r\n\r\n  get layerType() {\r\n    return \"isolation-window-layer\";\r\n  }\r\n\r\n  onHover(canvas, cursorInfo) {\r\n    return;\r\n  }\r\n\r\n  static _splitWindows(windows, height) {\r\n    let points = [];\r\n    for (let window of windows) {\r\n      points.push({ mz: window.lower_bound, intensity: height });\r\n      points.push({ mz: window.upper_bound, intensity: height });\r\n    }\r\n    return points;\r\n  }\r\n\r\n  styleArtist(path) {\r\n    let gapSize = 5;\r\n    let dashSize = 5;\r\n    return super\r\n      .styleArtist(path)\r\n      .attr(\"stroke-dasharray\", `${dashSize} ${gapSize}`);\r\n  }\r\n}\r\n",{"ruleId":"52","severity":1,"message":"53","line":13,"column":26,"nodeType":"54","messageId":"55","endLine":13,"endColumn":38},{"ruleId":"52","severity":1,"message":"56","line":17,"column":10,"nodeType":"54","messageId":"55","endLine":17,"endColumn":26},{"ruleId":"52","severity":1,"message":"57","line":18,"column":10,"nodeType":"54","messageId":"55","endLine":18,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":90,"column":20,"nodeType":"60","messageId":"61","endLine":90,"endColumn":22},{"ruleId":"52","severity":1,"message":"62","line":99,"column":23,"nodeType":"54","messageId":"55","endLine":99,"endColumn":37},{"ruleId":"52","severity":1,"message":"63","line":103,"column":20,"nodeType":"54","messageId":"55","endLine":103,"endColumn":31},{"ruleId":"64","severity":1,"message":"65","line":132,"column":6,"nodeType":"66","endLine":132,"endColumn":73,"suggestions":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"52","severity":1,"message":"72","line":6,"column":8,"nodeType":"54","messageId":"55","endLine":6,"endColumn":18},{"ruleId":"52","severity":1,"message":"73","line":12,"column":7,"nodeType":"54","messageId":"55","endLine":12,"endColumn":16},{"ruleId":"64","severity":1,"message":"74","line":123,"column":6,"nodeType":"66","endLine":123,"endColumn":26,"suggestions":"75"},{"ruleId":"52","severity":1,"message":"76","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":9},{"ruleId":"52","severity":1,"message":"77","line":461,"column":9,"nodeType":"54","messageId":"55","endLine":461,"endColumn":21},"no-unused-vars","'SpectrumList' is defined but never used.","Identifier","unusedVar","'CircularProgress' is defined but never used.","'Label' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setDataFileKey' is assigned a value but never used.","'setDataHost' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'config' and 'spectrumData.scanId'. Either include them or remove the dependency array.","ArrayExpression",["78"],"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'InputLabel' is defined but never used.","'useStyles' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'config.dataHost'. Either include it or remove the dependency array.",["81"],"'_' is defined but never used.","'apexPosition' is assigned a value but never used.",{"desc":"82","fix":"83"},"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [config.ms1Averagine, config.msnAveragine, config.ms1ScanAveraging, spectrumData.scanId, config]",{"range":"86","text":"87"},"Update the dependencies array to be: [config.dataFileKey, config.dataHost]",{"range":"88","text":"89"},[3853,3920],"[config.ms1Averagine, config.msnAveragine, config.ms1ScanAveraging, spectrumData.scanId, config]",[3758,3778],"[config.dataFileKey, config.dataHost]"]